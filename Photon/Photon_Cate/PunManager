using System.Collections;
using System.Collections.Generic;
using UnityEngine;
using UnityEngine.UI;


using Photon.Pun;
using Photon.Realtime;
using PN = Photon.Pun.PhotonNetwork;

public delegate void defaultdel();

public class PhotonManager : MonoBehaviourPunCallbacks
{
    public static PhotonManager Instance;

    #region UI
    [Header("[UI_State]")]
    public Text StateUI;

    [Header("[UI_InputField]")]
    public InputField RoomNameInputField;

    [Header("[Room Option]")]
    public InputField RoomOptionInputField;

    [Header("[Room LIstItem Grid]")]
    public RectTransform RoomListGrid;

    [Header("[Room List Item]")]
    public GameObject RoomListItem;
    #endregion


    private void Awake()
    {
        Instance = this;
        PhotonServerSetting();
    }

    private void PhotonServerSetting()
    {
        AppSettings _pnAppSettings = PN.PhotonServerSettings.AppSettings;

        _pnAppSettings.AppIdRealtime = "8c42ded6-adcc-41bb-b45c-9e9962fe898a";

        _pnAppSettings.UseNameServer = true;
        _pnAppSettings.EnableProtocolFallback = true;

        _pnAppSettings.Server = string.Empty;
        _pnAppSettings.Port = 0;

        _pnAppSettings.AppVersion = "1.0.0";
        _pnAppSettings.FixedRegion = "kr";

        PN.PhotonServerSettings.DevRegion = string.Empty;
        Debug.Log("<color=yellow>PhotonServerSetting Is Complete!!!!</color>");
        StateUI.text = $"<color=cyan>Photon Server Setting State</color>\n\n\n\n" +
                       $"<color=white>AppIdRealtime</color> :{_pnAppSettings.AppIdRealtime}\n\n" +
                       $"<color=white>UseNameServer</color> :{_pnAppSettings.UseNameServer}\n\n" +
                       $"<color=white>AppVersion</color> :{_pnAppSettings.AppVersion}\n\n" +
                       $"<color=white>FixedRegion</color> :{_pnAppSettings.FixedRegion}\n\n";
    }

    public void ConnectServer()
    {
        if(PN.IsConnected)
        {
            Debug.Log("<color=red>You are already Connected to Server</color>");
            return;
        }
        PN.ConnectUsingSettings();
    }

    public override void OnConnectedToMaster()
    {
        Debug.Log("<color=red>Connecting Server Is Complete</color>");
        PN.JoinLobby();
    }

    public void Disconnect()
    {
        PN.Disconnect();
    }

    public override void OnDisconnected(DisconnectCause cause)
    {
        Debug.Log("<color=red>Disconnecting Server Is Complete</color>");
    }

    public void JoinLobby()
    {
        if (!PN.IsConnected)
        {
            Debug.Log("<color=red>You have to Connect Server,Please Complete to Connect Server</color>");
            return;
        }
        PN.JoinLobby();
    }

    public override void OnJoinedLobby()
    {
        Debug.Log("<color=red>Success to Enter the Lobby</color>");
    }

    public void LeaveLobby()
    {
        if(!PN.InLobby)
        {
            Debug.Log("<color=red>You are not Lobby, Please Check</color>");
            return;
        }
        PN.LeaveLobby();
    }

    public override void OnLeftLobby()
    {
        Debug.Log("<color=red>Success to Leave the Lobby</color>");
    }

    public void CreateRoom()
    {
        if(!PN.IsConnected)
        {
            Debug.Log("<color=red>If you want to make room, Please check Connecting the Server State</color>");
            return;
        }

        if(!PN.InLobby)
        {
            Debug.Log("<color=red>If you want to make room, Please check are you Lobby</color>");
            return;
        }

        if(string.IsNullOrEmpty(RoomNameInputField.text))
        {
            Debug.Log("<color=yellow>You have to Write 'Room Name'</color>");
            return;
        }

        if(string.IsNullOrEmpty(RoomOptionInputField.text))
        {
            Debug.Log("<color=yellow>you didn't set RoomOption[MaxPlayers]</color>");
            return;
        }

        byte _temp = byte.Parse(RoomOptionInputField.text);
        PN.CreateRoom(RoomNameInputField.text,new RoomOptions {MaxPlayers = _temp,IsOpen = true, IsVisible = true,CleanupCacheOnLeave= true});
    }

    public override void OnCreatedRoom()
    {
        Debug.Log("<color=red>Success to Create the Room</color>");
        PN.LeaveRoom();
    }

    //Lobby에 접속하면 CallBack 되는 함수
    public override void OnRoomListUpdate(List<RoomInfo> roomList)
    {
        Debug.LogError(roomList.Count);
       for(int i=0; i< roomList.Count; i++)
        {
           Instantiate(RoomListItem, RoomListGrid.transform).GetComponent<RoomListItem>().SetRoomInfo(roomList[i].Name);
        }
    }
    

    public void LeaveRoom()
    {
        if(!PN.InRoom)
        {
            Debug.Log("<color=red>You are not Room, Please sure that you are room</color>");
            return;
        }

        PN.LeaveRoom();
    }

    public override void OnLeftRoom()
    {
        Debug.Log("<color=red>Success to left the Room</color>");
    }

    public void JoinedRoom(string _roomName)
    {
        PN.JoinRoom(_roomName);
    }

    public override void OnJoinedRoom()
    {
        Debug.Log("<color=red>Success to join room</color>");
    }

    #region OnClickEvent
    public void OnClickConnectServer()
    {
        ConnectServer();
    }

    public void OnClickDisConnectServer()
    {
        Disconnect();
    }
    public void OnClickJoinLobby()
    {
        JoinLobby();
    }
    public void OnClickLeaveLobby()
    {
        LeaveLobby();
    }

    public void OnClickCreateRoom()
    {
        CreateRoom();
    }

    public void OnClickLeaveRoom()
    {
        LeaveRoom();
    }
    #endregion
}
