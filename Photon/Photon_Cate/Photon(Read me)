-포톤에서 Room은 간단하게 말하면 플레이어들이 만나서 어떤 행위를 할수있게 해주는 케이지라고 생각하면 이해하기 편하다.

일반적으로 게임을 시작하고 인게임까지 참여하는 플로우를 생각해보면 
1.서버 세팅
2.로비 입장
3.(선택한)방에 입장

간략하게 이렇게 3가지의 경로를 통해서 게임에 참여 할수있다.

방에 입장해야하는 이유
-방에 참여를 해야만 RPC 즉 플레이어끼리 신호를 주고 받을 수있다.

여기서 RPC를 어떻게 쏘냐는 게임의 형태에 따라 나뉜다.
간략하게 게임의 형태를 두가지로 나누어서 예를 들어보면
-상태가 변하는 게임(방장이 방을 만들어서 상태를 변화시키는 형태)
-RPG와 같이 방장이라는 개념이 아닌 각각의 플레이어들이 정보를 주고 받는게임

이렇게 두가지로 분리하여 설명할것이다.

첫번째의 경우 ServerSetting을 한 이후 로비에 입장하고 룸에 첫번째로 참여한 플레이어를 마스터 클라이언트로 상정하여 방의 주인,즉 마스터 클라이언트로 바꾸어서 상태를 변환할수있는 권한을 부여한다.
이렇게 해야 다른 플레이어들은 마스터의 신호에따라 1스테이지 2스테이지 혹은 다음상태로의 변환이 용이해지기 때문이다.(주요 상태는 마스터가 쏘거나 혹은 마스터를 거쳐서 사용한다)
-즉, 마스터는 상태를 변환시키고 다른 플레이어들은 받은 RPC를 통해 전체에 영향을 끼치지 않는, 자신의 상태에 영향을 주는 기본값들만 바꿔서 진행하면 되기 때문이다.
-결과는 마스터가 정리하여 결과State일때 뿌려주면 됨.

두번째의 경우 ServerSetting을 한 이후 로비에 입장하고 이미 제작 되어있어 있다면 그방에 아닐경우 방을 만들어 참여한다.여기 까지는 첫번째의 경우 와 같다.
하지만 차이가 존재하는데 이는 마스터를 굳이 거치지 않고 RPC를 RPCTarget.AllBuffured로 하여 그방에 존재하는 이들에게 개개인의 RPC정보를 쏘면 된다는 것이다.

왜 이렇게 각각의 개인이 각각의 개인에게 쏘는 이유는 트레픽때문이라고 생각을 한다.
물론 RPG에서도 마스터 클라이언트가 신호를 모든 신호를 총괄하여 RPC를 쏠수는 있지만, 그럴경우 마스터클라이언트로 상정되어있는 유저의 인게임에서의 트레픽이 과도하게 뛰어 과부하가 걸릴수있고, 
만약 마스터의 송신 속도가 느리다고 할경우 다른 플레이어의 플레이에도 게임속 이질감을 줄것이다.(CallBack의 시간이 오래걸릴수있다는 뜻)

그러므로 차라리 마스터로 쏘는것보다 각각개인이 그 룸에 포함되어 있는 개인들에게 신호를 보내는 것이 대부분의 측면에서 유리하고, 게임 속 이질감또한 줄어들것이다.


+Photon에서 ServerSetting을 하다보면 Protocol이라는 부분이 나온다.
이는 데이터를 어떤 방식을 통해 전송할것인지 따라 다르다.

그래서 제가 사용하는 대부분의 Photon의 Protocol에는 UDP가 사용된다.
   [
    주로 사용되는것은 UDP와 TCP인데 이두개는 완벽하게 상이한 기능을 가지고 있다.
    UDP의 경우(User Datagram Protocol)이라고 불려지고,"데이터를 데이터 그램 단위로 처리하는 프로토콜"을 의미한다.
    위에서 말한 바와 같이 UDP의 경우는 비연결형 프로토콜이라고도 불려지고 이의 장점은 데이터 전송 속도가 TCP보다 빠르기 때문에,신속성 측면에서 강점을 보여준다. 하지만 속도가 빠른만큼 정확성 즉 신뢰성이
    떨어지기때문에 신뢰성보다는 성능을 중요시 여기는 경우에 사용된다.
    UDP는 1:1,1:N,N:N으 방향적으로 통신이 가능하다.
    하지만 서로 연결이 되어있는지에 대한 것 ,즉 통신 준비가 되어있는지 확인을 하지 않는다. 그렇기 때문에 데이터에 손실이 발생할수 있다.
    그렇기에 신호의 순서가 뒤바뀔수도 있다(ex)1,2,3 -> 1,3,2)

    TCP의 경우(Transmission Control Protocol)이라고 불려지고,"인터넷상에서 데이터를 메세지의 형태로 보내기 위해 IP와 함께 사용하는 프로토콜"을 의미한다.
    위에서 말한 바와 같이 TCP의 경우는 연결형 프로토콜이라고도 불려지고 이의 장점은 데이터의 신뢰성이 상당히 높다는 것 그리고 스크림 전송으로 전송 데이터의 크기가 UDP와 다르게 무제한이라는 강점이 있다는것이다.
    하지만 신뢰성이 높은 반면 신속성에서는 뒤떨어진 모습을 보여준다. TCP는 클라이언트와 서버의 1대1의 통신 준비 상태를 확인하고 연결이 되었을 때만 데이터의 전송이 가능하므로 신뢰성 측면에서는 
    데이터의 손실 같은것은 거의 걱정하지않아도 되면, 신호의 순서가 뒤바뀌거나 하지않는다.(ex)1,2,3-> 1,2,3)
    그렇기에 Streaming서비스에서는 사용되지 않는다(왜냐하면 손실된 데이터가 존재할경우 다시 재전송요청을 하기떄문이다)
    하지만 소실하면 안될 정보를 옮기는 상황에서는 TCP를 사용한다.
    ]
